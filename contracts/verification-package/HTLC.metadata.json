{
  "compiler": {
    "version": "0.8.28+commit.7893614a"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "type": "error",
        "name": "ReentrancyGuardReentrantCall"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "token",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "SafeERC20FailedOperation"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "contractId",
            "type": "bytes32",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "bytes32",
            "name": "preimage",
            "type": "bytes32",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "HTLCClaimed",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "contractId",
            "type": "bytes32",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "sender",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "tokenAddress",
            "type": "address",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "bytes32",
            "name": "hashlock",
            "type": "bytes32",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "timelock",
            "type": "uint256",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "HTLCCreated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "contractId",
            "type": "bytes32",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "sender",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "HTLCRefunded",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "_contractId",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "_preimage",
            "type": "bytes32"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "claim"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "contracts",
        "outputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "tokenAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          },
          {
            "internalType": "bytes32",
            "name": "hashlock",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "timelock",
            "type": "uint256"
          },
          {
            "internalType": "bool",
            "name": "withdrawn",
            "type": "bool"
          },
          {
            "internalType": "bool",
            "name": "refunded",
            "type": "bool"
          },
          {
            "internalType": "bytes32",
            "name": "preimage",
            "type": "bytes32"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_receiver",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "_hashlock",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "_timelock",
            "type": "uint256"
          }
        ],
        "stateMutability": "payable",
        "type": "function",
        "name": "createHTLCNative",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "contractId",
            "type": "bytes32"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_receiver",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "_hashlock",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "_timelock",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "_tokenAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "createHTLCToken",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "contractId",
            "type": "bytes32"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "_contractId",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getContract",
        "outputs": [
          {
            "internalType": "struct HTLC.Contract",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "receiver",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "tokenAddress",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              },
              {
                "internalType": "bytes32",
                "name": "hashlock",
                "type": "bytes32"
              },
              {
                "internalType": "uint256",
                "name": "timelock",
                "type": "uint256"
              },
              {
                "internalType": "bool",
                "name": "withdrawn",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "refunded",
                "type": "bool"
              },
              {
                "internalType": "bytes32",
                "name": "preimage",
                "type": "bytes32"
              }
            ]
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "_contractId",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "hasContract",
        "outputs": [
          {
            "internalType": "bool",
            "name": "exists",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "_contractId",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "isClaimable",
        "outputs": [
          {
            "internalType": "bool",
            "name": "isClaimable",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "_contractId",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "isRefundable",
        "outputs": [
          {
            "internalType": "bool",
            "name": "isRefundable",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "_contractId",
            "type": "bytes32"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "refund"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "claim(bytes32,bytes32)": {
          "details": "Can be called by anyone (Vincent agent) on behalf of the receiver",
          "params": {
            "_contractId": "The HTLC contract identifier",
            "_preimage": "The secret that hashes to the hashlock"
          }
        },
        "createHTLCNative(address,bytes32,uint256)": {
          "params": {
            "_hashlock": "SHA256 hash of the secret preimage",
            "_receiver": "Address that can claim the funds with the preimage",
            "_timelock": "Unix timestamp after which sender can refund"
          },
          "returns": {
            "contractId": "Unique identifier for this HTLC"
          }
        },
        "createHTLCToken(address,bytes32,uint256,address,uint256)": {
          "params": {
            "_amount": "Amount of tokens to lock",
            "_hashlock": "SHA256 hash of the secret preimage",
            "_receiver": "Address that can claim the funds with the preimage",
            "_timelock": "Unix timestamp after which sender can refund",
            "_tokenAddress": "Address of the ERC20 token contract"
          },
          "returns": {
            "contractId": "Unique identifier for this HTLC"
          }
        },
        "getContract(bytes32)": {
          "params": {
            "_contractId": "The HTLC contract identifier"
          },
          "returns": {
            "_0": "Contract struct containing all details"
          }
        },
        "hasContract(bytes32)": {
          "params": {
            "_contractId": "The HTLC contract identifier"
          },
          "returns": {
            "exists": "True if contract exists"
          }
        },
        "isClaimable(bytes32)": {
          "params": {
            "_contractId": "The HTLC contract identifier"
          },
          "returns": {
            "isClaimable": "True if contract can be claimed"
          }
        },
        "isRefundable(bytes32)": {
          "params": {
            "_contractId": "The HTLC contract identifier"
          },
          "returns": {
            "isRefundable": "True if contract can be refunded"
          }
        },
        "refund(bytes32)": {
          "details": "Can be called by anyone (Vincent agent for auto-refund)",
          "params": {
            "_contractId": "The HTLC contract identifier"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "claim(bytes32,bytes32)": {
          "notice": "Claim funds by revealing the preimage"
        },
        "createHTLCNative(address,bytes32,uint256)": {
          "notice": "Create a new HTLC for native HBAR"
        },
        "createHTLCToken(address,bytes32,uint256,address,uint256)": {
          "notice": "Create a new HTLC for ERC20 tokens"
        },
        "getContract(bytes32)": {
          "notice": "Get contract details"
        },
        "hasContract(bytes32)": {
          "notice": "Check if a contract exists"
        },
        "isClaimable(bytes32)": {
          "notice": "Check if a contract is claimable (not expired)"
        },
        "isRefundable(bytes32)": {
          "notice": "Check if a contract is refundable (timelock expired)"
        },
        "refund(bytes32)": {
          "notice": "Refund locked funds after timelock expires"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/=lib/openzeppelin-contracts/",
      "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
      "forge-std/=lib/forge-std/src/",
      "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "compilationTarget": {
      "src/HTLC.sol": "HTLC"
    },
    "evmVersion": "cancun",
    "libraries": {}
  },
  "sources": {
    "lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol": {
      "keccak256": "0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d",
      "urls": [
        "bzz-raw://da5e832b40fc5c3145d3781e2e5fa60ac2052c9d08af7e300dc8ab80c4343100",
        "dweb:/ipfs/QmTzf7N5ZUdh5raqtzbM11yexiUoLC9z3Ws632MCuycq1d"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {
      "keccak256": "0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc",
      "urls": [
        "bzz-raw://1c299900ac4ec268d4570ecef0d697a3013cd11a6eb74e295ee3fbc945056037",
        "dweb:/ipfs/Qmab9owJoxcA7vJT5XNayCMaUR1qxqj1NDzzisduwaJMcZ"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol": {
      "keccak256": "0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44",
      "urls": [
        "bzz-raw://1bb2332a7ee26dd0b0de9b7fe266749f54820c99ab6a3bcb6f7e6b751d47ee2d",
        "dweb:/ipfs/QmcRWpaBeCYkhy68PR3B4AgD7asuQk7PwkWxrvJbZcikLF"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "keccak256": "0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2",
      "urls": [
        "bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303",
        "dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
      "keccak256": "0x869c06fcfd4e33df584f63c033467c3d4f5e51bdf78bc69d0eeef5c07e395ad9",
      "urls": [
        "bzz-raw://436721c3801101a789b998f14f161de63edb64229ff307b0951a97a964f07168",
        "dweb:/ipfs/QmaFWLRmVXFL629AyThz8Nc8W7RakZBVGo14AWB2WLyKcP"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol": {
      "keccak256": "0x6f9ed073e3dab12233a79cd85153f72c9e0f99c1f5512f6d5b1ef09fb46abbb0",
      "urls": [
        "bzz-raw://093d2a804b792a0000883c2215585963ed98ec4341b45bc4224844623387d161",
        "dweb:/ipfs/QmR5shjVosAoxdmY3EfkUWgFNV4CVUcbRNS7tkvbipssPX"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
      "keccak256": "0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97",
      "urls": [
        "bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b",
        "dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c",
      "urls": [
        "bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617",
        "dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u"
      ],
      "license": "MIT"
    },
    "src/HTLC.sol": {
      "keccak256": "0xb5e0bc09d35fe04add98cf323fe82d4290300e8567c5460c56ae79012fa82247",
      "urls": [
        "bzz-raw://7963ed8c94336340702f98ed82d82b3e10c6e29c94323e9ed55e2c440124983d",
        "dweb:/ipfs/QmPHcTMsmTgfGeJ2YK1D9ts9KMeUuZxGiT6EdFwxChbfrY"
      ],
      "license": "MIT"
    }
  },
  "version": 1
}
